# -*- coding: utf-8 -*-
"""Student Retention Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1geGpzVmZP3NSa025dMHCZamv6luqeD_4

Data Cleaning
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

# ========================================================================
# PART 1: DATA CLEANING
# ========================================================================

print("=" * 60)
print("Step 1: Data Loading and Cleaning")
print("=" * 60)

# ===== 1. Data Loading =====
print("\n[1/6] Loading raw data files...")

try:
    df_final_g6 = pd.read_csv('25data - g6&7 only - final_g6.csv')
    df_final_g7 = pd.read_csv('25data - g6&7 only - final_g7.csv')
    df_t1 = pd.read_csv('25data - g6&7 only - T1 academic.csv')
    df_t2 = pd.read_csv('25data - g6&7 only - T2 academic.csv')
    df_t3 = pd.read_csv('25data - g6&7 only - T3 academic.csv')
    df_withdraw = pd.read_csv('25data - g6&7 only - withdraw.csv')

    print(f"✓ Successfully loaded 6 data files")
    print(f"  - G6 students: {len(df_final_g6)} | G7 students: {len(df_final_g7)}")
    print(f"  - T1 records: {len(df_t1)} | T2 records: {len(df_t2)} | T3 records: {len(df_t3)}")
    print(f"  - Withdrawn students: {len(df_withdraw)}")

except FileNotFoundError as e:
    print(f"✗ File loading failed: {e}")
    raise


# ===== 2. Data Merging =====
print("\n[2/6] Merging datasets...")

df_t1['term'] = 'T1'
df_t2['term'] = 'T2'
df_t3['term'] = 'T3'

df_academic = pd.concat([df_t1, df_t2, df_t3], ignore_index=True)
print(f"✓ Term data merged: {len(df_academic)} records")

df_final = pd.concat([df_final_g6, df_final_g7], ignore_index=True)
print(f"✓ Annual data merged: {len(df_final)} records")

df_merged = pd.merge(
    df_academic,
    df_final,
    on='student_id',
    how='left',
    suffixes=('_term', '_final')
)
print(f"✓ Term-annual data linked: {len(df_merged)} records")

df_withdraw['is_withdraw'] = 1
df_merged = pd.merge(
    df_merged,
    df_withdraw[['student_id', 'is_withdraw']],
    on='student_id',
    how='left'
)
df_merged['is_withdraw'] = df_merged['is_withdraw'].fillna(0).astype(int)
print(f"✓ Withdrawal labels added: {df_merged['is_withdraw'].sum()} withdrawn students")


# ===== 3. Data Cleaning =====
print("\n[3/6] Data cleaning...")

def standardize_iep(value):
    if pd.isna(value):
        return 0
    if isinstance(value, str):
        value = value.strip().upper()
        if value in ['Y', 'YES', '1', 'TRUE']:
            return 1
        else:
            return 0
    return int(value) if value > 0 else 0

if 'iep_yn_term' in df_merged.columns:
    df_merged['iep_yn_term'] = df_merged['iep_yn_term'].apply(standardize_iep)
if 'iep_yn_final' in df_merged.columns:
    df_merged['iep_yn_final'] = df_merged['iep_yn_final'].apply(standardize_iep)

if 'iep_yn_term' in df_merged.columns and 'iep_yn_final' in df_merged.columns:
    df_merged['iep_yn'] = df_merged[['iep_yn_term', 'iep_yn_final']].max(axis=1)
    df_merged = df_merged.drop(columns=['iep_yn_term', 'iep_yn_final'])
elif 'iep_yn_term' in df_merged.columns:
    df_merged['iep_yn'] = df_merged['iep_yn_term']
    df_merged = df_merged.drop(columns=['iep_yn_term'])
elif 'iep_yn_final' in df_merged.columns:
    df_merged['iep_yn'] = df_merged['iep_yn_final']
    df_merged = df_merged.drop(columns=['iep_yn_final'])
else:
    df_merged['iep_yn'] = 0

student_iep = df_merged.groupby('student_id')['iep_yn'].max().to_dict()
df_merged['iep_yn'] = df_merged['student_id'].map(student_iep)

df_merged = df_merged.replace(['-', 'N/A', 'missing'], np.nan)

numeric_cols = [
    'core_average', 'overall_average', 'core_assessments',
    'hw_average', 'cw_average',
    'ela_overall', 'ela_hw', 'ela_cw', 'ela_assessment',
    'math_overall', 'math_hw', 'math_cw', 'math_assessment',
    'science_overall', 'science_hw', 'science_cw', 'science_assessment',
    'history_overall', 'history_hw', 'history_cw', 'history_assessment',
    'elective_overall',
    'core_gpa', 'ela_gpa', 'math_gpa', 'science_gpa', 'history_gpa',
    'total_abs', 'ex_abs', 'unex_abs',
    'suspension_count', 'behavior_points'
]

for col in numeric_cols:
    if col in df_merged.columns:
        df_merged[col] = pd.to_numeric(df_merged[col], errors='coerce')

df_merged['suspension_count'] = df_merged['suspension_count'].fillna(0)
df_merged['total_abs'] = df_merged['total_abs'].fillna(0)
df_merged['behavior_points'] = df_merged['behavior_points'].fillna(
    df_merged['behavior_points'].median()
)

df_cleaned = df_merged[df_merged['student_id'] != 'missing'].copy()
print(f"✓ Cleaning complete, retained {len(df_cleaned)} valid records")


# ===== 4. Feature Engineering =====
print("\n[4/6] Feature engineering...")

df_cleaned['attendance_rate'] = 1 - (df_cleaned['total_abs'] / 180)
df_cleaned['attendance_rate'] = df_cleaned['attendance_rate'].clip(0, 1)

df_cleaned = df_cleaned.sort_values(['student_id', 'term'])

term_order = {'T1': 1, 'T2': 2, 'T3': 3}
df_cleaned['term_num'] = df_cleaned['term'].map(term_order)

student_term_gpa = df_cleaned.pivot_table(
    index='student_id',
    columns='term',
    values='core_average',
    aggfunc='first'
).reset_index()

student_term_gpa['gpa_change_t1_t2'] = student_term_gpa['T2'] - student_term_gpa['T1']
student_term_gpa['gpa_change_t2_t3'] = student_term_gpa['T3'] - student_term_gpa['T2']
student_term_gpa['gpa_change_t1_t3'] = student_term_gpa['T3'] - student_term_gpa['T1']

student_final_gpa = df_cleaned.groupby('student_id')['core_gpa'].first().reset_index()
student_term_gpa = student_term_gpa.merge(student_final_gpa, on='student_id', how='left')
student_term_gpa['gpa_change_t1_final'] = student_term_gpa['core_gpa'] - student_term_gpa['T1']

gpa_changes = student_term_gpa[['student_id', 'gpa_change_t1_t2', 'gpa_change_t2_t3',
                                  'gpa_change_t1_t3', 'gpa_change_t1_final']]
df_cleaned = df_cleaned.merge(gpa_changes, on='student_id', how='left')

df_cleaned = df_cleaned.drop(columns=['term_num'], errors='ignore')

print("\nChecking and fixing Grade-Section consistency...")

mismatches_before = 0
for idx, row in df_cleaned.iterrows():
    if pd.notna(row['section']):
        section_str = str(row['section']).strip()
        if section_str and section_str[0].isdigit():
            section_grade = int(section_str[0])
            if section_grade != row['grade']:
                mismatches_before += 1

if mismatches_before > 0:
    print(f"  ⚠ Found {mismatches_before} records with Grade-Section mismatch")

    def fix_grade_from_section(row):
        if pd.notna(row['section']):
            section_str = str(row['section']).strip()
            if section_str and section_str[0].isdigit():
                return int(section_str[0])
        return row['grade']

    df_cleaned['grade'] = df_cleaned.apply(fix_grade_from_section, axis=1)
    print(f"  ✓ Grade field overridden with Section grade")
else:
    print(f"  ✓ Grade and Section labels consistent")

if df_cleaned['grade'].isnull().sum() > 0:
    print(f"\n  ⚠ Found {df_cleaned['grade'].isnull().sum()} missing grade records")

    df_cleaned['grade'] = df_cleaned.groupby('student_id')['grade'].transform(
        lambda x: x.fillna(x.mode()[0]) if not x.mode().empty else x
    )

    if df_cleaned['grade'].isnull().sum() > 0:
        missing_students = df_cleaned[df_cleaned['grade'].isnull()]['student_id'].unique()
        print(f"  ✗ Removing {len(missing_students)} students with undeterminable grade")
        df_cleaned = df_cleaned[df_cleaned['grade'].notna()].copy()

df_cleaned['grade'] = df_cleaned['grade'].astype(int)

df_cleaned['iep_yn'] = df_cleaned['iep_yn'].astype('category')
df_cleaned['gender'] = df_cleaned['gender'].astype('category')
df_cleaned['term'] = df_cleaned['term'].astype('category')

print(f"✓ New features: attendance_rate, gpa_change_t1_t2, gpa_change_t2_t3, gpa_change_t1_t3, gpa_change_t1_final")


# ===== 5. Data Validation =====
print("\n[5/6] Data quality check...")

key_fields = ['student_id', 'grade', 'term', 'core_average', 'attendance_rate']
missing_rates = df_cleaned[key_fields].isnull().mean() * 100

print("\nKey field missing rates:")
for field, rate in missing_rates.items():
    status = "✓" if rate < 5 else "⚠"
    print(f"  {status} {field}: {rate:.1f}%")

print("\nData range check:")
checks = [
    ('core_average', 0, 100),
    ('attendance_rate', 0, 1),
    ('behavior_points', 0, 100),
]

for col, min_val, max_val in checks:
    if col in df_cleaned.columns:
        actual_min = df_cleaned[col].min()
        actual_max = df_cleaned[col].max()
        status = "✓" if (actual_min >= min_val and actual_max <= max_val) else "⚠"
        print(f"  {status} {col}: [{actual_min:.1f}, {actual_max:.1f}]")


# ===== 6. Save Cleaned Data =====
print("\n[6/6] Saving data...")

output_file = 'cleaned_student_data.csv'
df_cleaned.to_csv(output_file, index=False)
print(f"✓ Data saved to: {output_file}")

student_summary = df_cleaned.groupby('student_id').agg({
    'grade': 'first',
    'gender': 'first',
    'iep_yn': 'first',
    'is_withdraw': 'first',
    'core_gpa': 'mean',
    'attendance_rate': 'mean',
    'behavior_points': 'mean',
    'suspension_count': 'sum'
}).reset_index()

student_summary.to_csv('student_summary.csv', index=False)
print(f"✓ Student summary saved to: student_summary.csv")


# ===== 7. Data Overview =====
print("\n" + "=" * 60)
print("Data Cleaning Complete - Overview")
print("=" * 60)

print(f"\nOverall Statistics:")
print(f"  - Total students: {df_cleaned['student_id'].nunique()}")
print(f"  - Data records: {len(df_cleaned)} (terms × students)")
print(f"  - Withdrawn students: {df_cleaned.groupby('student_id')['is_withdraw'].first().sum()}")
print(f"  - Withdrawal rate: {df_cleaned.groupby('student_id')['is_withdraw'].first().mean() * 100:.1f}%")

print(f"\nGrade distribution:")
grade_dist = df_cleaned.groupby('grade')['student_id'].nunique()
for grade, count in grade_dist.items():
    print(f"  - Grade {grade}: {count} students")

print(f"\nGender distribution:")
gender_dist = df_cleaned.groupby('gender')['student_id'].nunique()
for gender, count in gender_dist.items():
    print(f"  - {gender}: {count} students")

print(f"\nCore metrics statistics:")
print(df_cleaned[['core_average', 'core_gpa', 'attendance_rate', 'behavior_points']].describe())

print("\n" + "=" * 60)
print("✓ Data cleaning module complete!")
print("=" * 60)

cleaned_student_data = df_cleaned


