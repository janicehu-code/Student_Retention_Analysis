# -*- coding: utf-8 -*-
"""Student Retention Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1geGpzVmZP3NSa025dMHCZamv6luqeD_4

Data Cleaning
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')


# ========================================================================
# PART 2: KPI ANALYSIS
# ========================================================================

print("\n\n" + "=" * 60)
print("Module 02: KPI System & Descriptive Statistics")
print("=" * 60)

# ===== 1. Load Data =====
print("\n[1/4] Loading cleaned data...")
df = pd.read_csv('cleaned_student_data.csv')
print(f"✓ Loaded: {len(df)} records, {df['student_id'].nunique()} students")

# ===== 2. Student Annual Metrics Aggregation =====
print("\n[2/4] Calculating annual metrics...")

annual_metrics = df.groupby('student_id').agg({
    'grade': 'first',
    'gender': 'first',
    'section': 'first',
    'iep_yn': 'first',
    'is_withdraw': 'first',
    'hw_average': 'mean',
    'cw_average': 'mean',
    'core_assessments': 'mean',
    'core_average': 'mean',
    'core_gpa': 'first',
    'attendance_rate': 'mean',
    'behavior_points': 'mean',
    'suspension_count': 'sum',
    'gpa_change_t1_t2': 'first',
    'gpa_change_t2_t3': 'first',
    'gpa_change_t1_t3': 'first',
    'gpa_change_t1_final': 'first'
}).reset_index()

print(f"✓ Annual metrics aggregated: {len(annual_metrics)} students")

# ===== 3. Risk Scoring System (0-5 points) =====
print("\n[3/4] Building risk scoring system...")

gpa_threshold_g6 = annual_metrics[annual_metrics['grade']==6]['core_gpa'].quantile(0.25)
gpa_threshold_g7 = annual_metrics[annual_metrics['grade']==7]['core_gpa'].quantile(0.25)
gpa_thresholds = {6: gpa_threshold_g6, 7: gpa_threshold_g7}

behavioral_threshold = annual_metrics['behavior_points'].quantile(0.25)
attendance_threshold = annual_metrics['attendance_rate'].quantile(0.25)

print(f"\n  Risk thresholds (based on 25th percentile):")
print(f"    - GPA threshold: Grade 6 = {gpa_threshold_g6:.2f}, Grade 7 = {gpa_threshold_g7:.2f}")
print(f"    - Behavior points threshold: {behavioral_threshold:.2f}")
print(f"    - Attendance rate threshold: {attendance_threshold:.3f}")

annual_metrics['risk_score'] = 0
annual_metrics['risk_factors'] = ''

low_gpa_mask = annual_metrics.apply(
    lambda x: x['core_gpa'] < gpa_thresholds.get(x['grade'], 0), axis=1
)
annual_metrics.loc[low_gpa_mask, 'risk_score'] += 1
annual_metrics.loc[low_gpa_mask, 'risk_factors'] += 'Low GPA, '

consecutive_decline_mask = (
    (annual_metrics['gpa_change_t1_t2'] < 0) &
    (annual_metrics['gpa_change_t2_t3'] < 0)
)
annual_metrics.loc[consecutive_decline_mask, 'risk_score'] += 1
annual_metrics.loc[consecutive_decline_mask, 'risk_factors'] += 'Consecutive GPA decline, '

low_behavior_mask = annual_metrics['behavior_points'] < behavioral_threshold
annual_metrics.loc[low_behavior_mask, 'risk_score'] += 1
annual_metrics.loc[low_behavior_mask, 'risk_factors'] += 'Low behavior points, '

suspension_mask = annual_metrics['suspension_count'] > 0
annual_metrics.loc[suspension_mask, 'risk_score'] += 1
annual_metrics.loc[suspension_mask, 'risk_factors'] += 'Suspension record, '

low_attendance_mask = annual_metrics['attendance_rate'] < attendance_threshold
annual_metrics.loc[low_attendance_mask, 'risk_score'] += 1
annual_metrics.loc[low_attendance_mask, 'risk_factors'] += 'Low attendance, '

annual_metrics['risk_factors'] = annual_metrics['risk_factors'].str.rstrip(', ')
annual_metrics.loc[annual_metrics['risk_factors']=='', 'risk_factors'] = 'No warning'

def assign_risk_level(score):
    if score >= 4:
        return 3
    elif score == 3:
        return 2
    elif score == 2:
        return 1
    else:
        return 0

annual_metrics['risk_level'] = annual_metrics['risk_score'].apply(assign_risk_level)

print(f"✓ Risk scoring complete")


# ===== 4. Generate Descriptive Statistics Reports =====
print("\n[4/4] Generating statistical reports...")

risk_summary = annual_metrics.groupby('risk_level').agg(
    Student_Count=('student_id', 'count'),
    Avg_GPA=('core_gpa', 'mean'),
    Avg_Attendance=('attendance_rate', 'mean'),
    Avg_Behavior=('behavior_points', 'mean'),
    Withdrawn_Count=('is_withdraw', 'sum')
).reset_index()

risk_summary['Percentage'] = (risk_summary['Student_Count'] / len(annual_metrics) * 100).round(1)
risk_summary['Withdrawal_Rate'] = (risk_summary['Withdrawn_Count'] / risk_summary['Student_Count'] * 100).round(1)
risk_summary['Risk_Description'] = risk_summary['risk_level'].map({
    0: 'Normal', 1: 'Needs attention', 2: 'Moderate warning', 3: 'High warning'
})

if 'section' in annual_metrics.columns:
    section_comparison = annual_metrics.groupby(['grade', 'section']).agg(
        Student_Count=('student_id', 'count'),
        Avg_GPA=('core_gpa', 'mean'),
        Avg_Attendance=('attendance_rate', 'mean'),
        Withdrawn_Count=('is_withdraw', 'sum')
    ).reset_index()
    section_comparison['Withdrawal_Rate'] = (
        section_comparison['Withdrawn_Count'] / section_comparison['Student_Count'] * 100
    ).round(1)

gender_comparison = annual_metrics.groupby('gender').agg(
    Student_Count=('student_id', 'count'),
    Avg_GPA=('core_gpa', 'mean'),
    Avg_Attendance=('attendance_rate', 'mean'),
    Withdrawn_Count=('is_withdraw', 'sum')
).reset_index()
gender_comparison['Withdrawal_Rate'] = (
    gender_comparison['Withdrawn_Count'] / gender_comparison['Student_Count'] * 100
).round(1)

iep_comparison = annual_metrics.groupby('iep_yn').agg(
    Student_Count=('student_id', 'count'),
    Avg_GPA=('core_gpa', 'mean'),
    Avg_Attendance=('attendance_rate', 'mean'),
    Withdrawn_Count=('is_withdraw', 'sum')
).reset_index()
iep_comparison['Withdrawal_Rate'] = (
    iep_comparison['Withdrawn_Count'] / iep_comparison['Student_Count'] * 100
).round(1)
iep_comparison['iep_yn'] = iep_comparison['iep_yn'].map({0: 'Non-IEP', 1: 'IEP'})

high_risk_students = annual_metrics[annual_metrics['risk_level'] >= 2][[
    'student_id', 'grade', 'section', 'risk_level', 'risk_score',
    'risk_factors', 'core_gpa', 'attendance_rate', 'behavior_points',
    'suspension_count', 'is_withdraw'
]].sort_values('risk_score', ascending=False)


# ===== 5. Save Results =====
print("\nSaving results...")

annual_metrics.to_csv('student_annual_metrics.csv', index=False)
print("✓ Student annual metrics: student_annual_metrics.csv")

with pd.ExcelWriter('kpi_analysis_reports.xlsx', engine='openpyxl') as writer:
    risk_summary.to_excel(writer, sheet_name='1_Risk_Level_Distribution', index=False)

    if 'section' in annual_metrics.columns:
        section_comparison.to_excel(writer, sheet_name='2_ICT_vs_GenEd', index=False)

    gender_comparison.to_excel(writer, sheet_name='3_Gender_Comparison', index=False)
    iep_comparison.to_excel(writer, sheet_name='4_IEP_Comparison', index=False)
    high_risk_students.to_excel(writer, sheet_name='5_High_Risk_Students', index=False)

print("✓ Statistical reports: kpi_analysis_reports.xlsx")


# ===== 6. Output Key Statistics =====
print("\n" + "=" * 60)
print("Module 02 Complete - Key Findings")
print("=" * 60)

print("\n【1. Risk Level Distribution】")
print(risk_summary[['Risk_Description', 'Student_Count', 'Percentage', 'Avg_GPA', 'Withdrawal_Rate']].to_string(index=False))

if 'section' in annual_metrics.columns:
    print("\n【2. ICT vs GenEd Comparison】")
    print(section_comparison.to_string(index=False))

print("\n【3. Gender Comparison】")
print(gender_comparison.to_string(index=False))

print("\n【4. IEP Comparison】")
print(iep_comparison.to_string(index=False))

print("\n【5. Key Data Summary】")
print(f"  - High-risk students (Level 2-3): {len(high_risk_students)} ({len(high_risk_students)/len(annual_metrics)*100:.1f}%)")
print(f"  - Overall withdrawal rate: {annual_metrics['is_withdraw'].sum() / len(annual_metrics) * 100:.1f}%")
print(f"  - Average GPA: {annual_metrics['core_gpa'].mean():.2f}")
print(f"  - Average attendance rate: {annual_metrics['attendance_rate'].mean():.1%}")

print("\n" + "=" * 60)
print("✓ Module 02 Complete!")
print("=" * 60)



